//@version=5
indicator("CROSV [Scientist-kasutu]", overlay=true, max_lines_count = 500, max_labels_count = 500, max_bars_back=5000, format = format.volume)

// EMA Inputs
ema1_length = input.int(20, title="EMA 1 (20) Length", minval=1)
ema2_length = input.int(50, title="EMA 2 (50) Length", minval=1)
ema3_length = input.int(200, title="EMA 3 (200) Length", minval=1)
zone_width = input.int(15, title="Zone Width", minval=1)

// Toggle for EMA 1 (20)
show_ema1 = input.bool(true, title="Show EMA 1 (20)")

// Custom Color Inputs
up_color1 = input.color(color.blue, title="EMA 1 Up Color")
down_color1 = input.color(color.red, title="EMA 1 Down Color")
up_color2_zone = input.color(color.green, title="50 EMA Zone Up Color")
down_color2_zone = input.color(color.orange, title="50 EMA Zone Down Color")
up_color2 = input.color(color.blue, title="EMA 2 Up Color")
down_color2 = input.color(color.red, title="EMA 2 Down Color")
up_color3 = input.color(color.blue, title="EMA 3 Up Color")
down_color3 = input.color(color.red, title="EMA 3 Down Color")

// Calculating EMAs
ema1 = ta.ema(close, ema1_length)
ema2 = ta.ema(close, ema2_length)
ema3 = ta.ema(close, ema3_length)

// Color conditions for EMA 20, EMA 50, and EMA 50 zone
ema1_color = (ema1 > ema2) ? up_color1 : down_color1  // EMA 1 (20) line color changes after crossing EMA 50
ema2_color = (ema2 > ema3) ? up_color2 : down_color2  // EMA 2 (50) line color changes after crossing EMA 200
zone_color = (ema2 > ema1) ? up_color2_zone : down_color2_zone  // EMA 50 zone changes based on EMA 20

// Plot EMAs with conditional coloring and transparency for toggle
plot(ema1, color=show_ema1 ? ema1_color : na, linewidth=1, title="EMA 1 (20)")  // EMA 1 changes color based on EMA 50
plot(ema2, color=ema2_color, linewidth=2, title="EMA 2 (50)")  // EMA 2 changes color based on EMA 200
plot(ema3, color=(ema3 > ema2) ? down_color3 : up_color3, linewidth=3, title="EMA 3 (200)")  // Corrected color condition for EMA 3

// Plot Outline for EMA 2 Using Zone Color
plot(ema2, color=color.new(zone_color, 80), linewidth=zone_width, title="EMA 2 Outline")  // Outline using zone color

// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © LonesomeTheBlue
// study("Trend Lines v2", overlay=true, max_bars_back = 4000)

startyear = input.int(defval = 2020, title = "Start Year")
startmonth = input.int(defval = 1, title = "Start Month")
startday = input.int(defval = 1, title = "Start day")
prd = input.int(defval = 20, title="Pivot Period", minval = 10, maxval = 50)
PPnum = input.int(defval = 3, title="Number of Pivot Points to check", minval = 2, maxval = 6)
utcol = input.color(defval = color.lime, title = "Colors", inline = "tcol")
dtcol = input.color(defval = color.red, title = "", inline = "tcol")

// Pivot High and Pivot Low
float _ph = ta.pivothigh(prd, prd)
float ph = na(_ph) ? na : _ph
float _pl = ta.pivotlow(prd, prd)
float pl = na(_pl) ? na : _pl

// Initialize arrays
var float[] tval = array.new_float(PPnum)
var int[] tpos = array.new_int(PPnum)
var float[] bval = array.new_float(PPnum)
var int[] bpos = array.new_int(PPnum)

// Function to update arrays
add_to_array(apointer1, apointer2, val)=>
    array.unshift(apointer1, val)
    array.unshift(apointer2, bar_index)
    array.pop(apointer1)
    array.pop(apointer2)

// Add pivot highs and lows to the arrays
if not na(ph)
    add_to_array(tval, tpos, ph)

if not na(pl)
    add_to_array(bval, bpos, pl)
    
// line definitions
maxline = 3
var bln = array.new_line(maxline, na)
var tln = array.new_line(maxline, na)

// loop for pivot points to check if there is possible trend line
countlinelo = 0
countlinehi = 0

starttime = timestamp(startyear, startmonth, startday, 0, 0, 0)

if time >= starttime
    for x = 0 to maxline - 1
        line.delete(array.get(bln, x))
        line.delete(array.get(tln, x))
    for p1 = 0 to PPnum - 2 
        uv1 = 0.0
        uv2 = 0.0
        up1 = 0
        up2 = 0
        if countlinelo <= maxline
            for p2 = PPnum - 1 to p1 + 1
                val1 = array.get(bval, p1)
                val2 = array.get(bval, p2)
                pos1 = array.get(bpos, p1)
                pos2 = array.get(bpos, p2)
                if val1 > val2
                    diff = (val1 - val2) / (pos1 - pos2)
                    hline = val2 + diff
                    lloc = bar_index
                    lval = low
                    valid = true
                    for x = pos2 + 1 - prd to bar_index
                        if close[bar_index - x] < hline
                            valid := false
                            break
                        lloc := x
                        lval := hline
                        hline := hline + diff
                    
                        
                    if valid
                        uv1 := hline - diff
                        uv2 := val2
                        up1 := lloc
                        up2 := pos2
                        break

        dv1 = 0.0
        dv2 = 0.0
        dp1 = 0
        dp2 = 0                
        if countlinehi <= maxline
            for p2 = PPnum - 1 to p1 + 1                
                val1 = array.get(tval, p1)
                val2 = array.get(tval, p2)
                pos1 = array.get(tpos, p1)
                pos2 = array.get(tpos, p2)
                if val1 < val2
                    diff = (val2 - val1) / float(pos1 - pos2)
                    hline = val2 - diff
                    lloc = bar_index
                    lval = high
                    valid = true
                    for x = pos2 + 1 - prd to bar_index
                        if close[bar_index - x] > hline
                            valid := false
                            break
                        lloc := x
                        lval := hline
                        hline := hline - diff
                        
                    if valid
                        dv1 := hline + diff
                        dv2 := val2
                        dp1 := lloc
                        dp2 := pos2
                        break
                         
        // if there is continues uptrend line then draw it
        if up1 != 0 and up2 != 0 and countlinelo < maxline
            countlinelo += 1
            array.set(bln, countlinelo - 1, line.new(up2 - prd, uv2, up1, uv1, color = utcol))
        
        // if there is continues downtrend line then draw it
        if dp1 != 0 and dp2 != 0 and countlinehi < maxline
            countlinehi += 1
            array.set(tln, countlinehi - 1, line.new(dp2 - prd, dv2, dp1, dv1, color = dtcol))

// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © anche1991
// indicator("anche/cme_gap_btc", overlay=true)
sym = syminfo.tickerid
cme_btc = request.security(sym, "D", close)

// Gradient function copied from PineCoders https://www.tradingview.com/v/hqH4YIFa/
f_c_gradientAdvDecPro(_source, _center, _steps, _c_bearWeak, _c_bearStrong, _c_bullWeak, _c_bullStrong) =>
    var float _qtyAdvDec = 0.
    var float _maxSteps  = math.max(1, _steps)
    bool  _xUp     = ta.crossover(_source, _center)
    bool  _xDn     = ta.crossunder(_source, _center)
    float _chg     = ta.change(_source)
    bool  _up      = _chg > 0
    bool  _dn      = _chg < 0
    bool  _srcBull = _source > _center
    bool  _srcBear = _source < _center
    _qtyAdvDec := 
      _srcBull ? _xUp ? 1 : _up ? math.min(_maxSteps, _qtyAdvDec + 1) : _dn ? math.max(1, _qtyAdvDec - 1) : _qtyAdvDec :
      _srcBear ? _xDn ? 1 : _dn ? math.min(_maxSteps, _qtyAdvDec + 1) : _up ? math.max(1, _qtyAdvDec - 1) : _qtyAdvDec : _qtyAdvDec
    var color _return = na
    _return := 
      _srcBull ? color.from_gradient(_qtyAdvDec, 1, _maxSteps, _c_bullWeak, _c_bullStrong) : 
      _srcBear ? color.from_gradient(_qtyAdvDec, 1, _maxSteps, _c_bearWeak, _c_bearStrong) : _return

var color _C_PRIMARY = #399e46
var color _C_SECONDARY = #fc2d0d

var C_PRIMARY = input.color(_C_PRIMARY, title="Bull")
var C_SECONDARY = input.color(_C_SECONDARY, title="Bear")

friday_close = ta.valuewhen(dayofweek == dayofweek.friday, cme_btc, 0)
should_plot = (dayofweek == dayofweek.friday and hour > 23) or dayofweek == dayofweek.saturday or dayofweek == dayofweek.sunday

p1 = plot(should_plot ? close : na, title='Candle Close', color=color.new(C_PRIMARY, 100), style=plot.style_linebr)
p2 = plot(should_plot ? friday_close : na, title="CME Close", color=color.new(C_SECONDARY, 100), style=plot.style_linebr, linewidth=3)
color cc = f_c_gradientAdvDecPro(close, friday_close, 15, color.new(C_PRIMARY, 70), C_PRIMARY, color.new(C_SECONDARY, 70), C_SECONDARY)
fill(p1, p2, cc)

// Order Blocks
// Input options
inputRange = input.int(25, "Candle Range", minval=5, maxval=100, step=1, group = "BASIC SETTINGS")
bullishBreakerSource = input.source(close, title="Bullish Breaker Source")
bearishBreakerSource = input.source(close, title="Bearish Breaker Source")

// optional displays
showPD = input.bool(false, "Show Previous Day High/Low", group = "Extras")
showBearishBOS = input.bool(false, "Show Bearsish BOS Line", group = "Extras")
showBullishBOS = input.bool(false, "Show Bullish BOS Line", group = "Extras")
showBreakerCandles = input.bool(false, "Highlight Breaker Candles", group = "Extras")
showRetestCandles = input.bool(false, "Highlight Re-test Candles", group = "Extras")
showTrendColours = input.bool(false, "Show Trend Colours", group = "Extras")
showAlerts = input.bool(false, "Trigger Alerts", group = "Extras")
useMitigatedBlocks = input.bool(false, "Show Mitigated Blocks", group = "Extras")

// colours & styles
bearishOBColour = input.color(color.rgb(219,166,50, 80), title = "Bearish Order Block Colour", group = "STYLES")
bullishOBColour = input.color(color.rgb(192,230,174, 60), title= "Bullish Order Block Colour", group = "STYLES")
mitigatedOBColour = input.color(color.rgb(207,203,202, 80), title= "Mitigated Order Block Colour", group = "STYLES")
BOSCandleColour = input.color(color.yellow, title= "Breaker Candle Colour", group = "STYLES")
shortRetestCandleColour = input.color(color.purple, title= "Short Re-Test Candle Colour", group = "STYLES")
longRetestCandleColour = input.color(color.orange, title= "Long Re-Test Candle Colour", group = "STYLES")
bullishTrendColor = input.color(color.lime, title= "Bullish Trend Colour", group = "STYLES")
bearishTrendColour = input.color(color.red, title= "Bearish Trend Colour", group = "STYLES")


// candle colouring
var int CandleColourMode = 0
var bool BosCandle = false
var bool bullishAlert = false
var bool bearishAlert = false
var bool shortRetestCandle = false
var bool longRetestCandle = false

// tracking for entries
var int lastDownIndex=0
var float lastDown=0
var float lastLow=0

var int lastUpIndex=0
var float lastUp=0
var float lastUpLow=0
var float lastUpOpen=0
var float lastHigh=0
var float lastBullBreakLow=0

// structure
var int structureLowIndex=0
float structureLow=1000000

// order block drawing arrays
var longBoxes = array.new_box()
var longBoxStart = array.new_int()
var longBoxState = array.new_int()
var shortBoxes = array.new_box()
var shortBoxStart = array.new_int()
var shortBoxState = array.new_int()
var bosLines = array.new_line()

var int lastLongIndex=0
var int lastShortIndex=0
BosCandle:=false
bullishAlert:=false
bearishAlert:=false
shortRetestCandle:=false
longRetestCandle:=false

PDH = request.security(syminfo.tickerid,"D",high[1])
PDL = request.security(syminfo.tickerid,"D",low[1])

if(showPD)
    var line l_pdh = na, var line l_pdo = na, var line l_pdl = na, var label lbl_pdh = na, var label lbl_pdl = na
    if barstate.islast
        lbl_pdh := label.new(bar_index + 8, PDH, "PDH", style=label.style_label_left, textcolor = color.white)
        lbl_pdl := label.new(bar_index + 8, PDL, "PDL", style=label.style_label_left, textcolor = color.white)
        l_pdh := line.new(bar_index-1, PDH, bar_index + 8, PDH, extend=extend.left, color=color.blue)
        l_pdl := line.new(bar_index-1, PDL, bar_index+8, PDL, extend=extend.left, color=color.blue)
    line.delete(l_pdh[1])
    line.delete(l_pdo[1])
    line.delete(l_pdl[1])
    label.delete(lbl_pdh[1])
    label.delete(lbl_pdl[1])

// functions
structureLowIndexPointer(len) =>
    float minValue = ta.highest(high, inputRange)[1]
    int minIndex = bar_index 
    for i = 1 to len
        if low[i] < minValue
            minValue := low[i]
            minIndex := bar_index[i]
    minIndex

withinBullishBlock(position) =>
    bool result = false
    if((array.size(longBoxes)>0))
        for i = (array.size(longBoxes)-1) to 0
            box=array.get(longBoxes,i)
            top=box.get_top(box)
            bottom=box.get_bottom(box)
            if(position<top and position>bottom)
                result:=true
    result


// get the lowest point in the range
structureLow:=ta.lowest(low, inputRange)[1]
structureLowIndex:=structureLowIndexPointer(inputRange)


// bearish break of structure
if(ta.crossunder(bearishBreakerSource,structureLow))
    if((bar_index - lastUpIndex) < 1000)
        // add bear order block
        array.push(shortBoxStart, bar_index)
        array.push(shortBoxState, 0)
        array.push(shortBoxes,box.new(left=lastUpIndex, top=lastHigh, bottom=lastUpLow,right=lastUpIndex, bgcolor=bearishOBColour,border_color=color.rgb(207,203,202, 100), extend=extend.right))
        // add bearish bos line
        if(showBearishBOS)
            array.push(bosLines, line.new(structureLowIndex, structureLow, bar_index, structureLow, color= color.red, style=line.style_solid, width = 2))
        // show bos candle
        BosCandle:=true
        // color mode bear
        CandleColourMode:=0
        lastShortIndex:=lastUpIndex
        bearishAlert:=true

// bullish break of structure?
if((array.size(shortBoxes)>0))
    for i = (array.size(shortBoxes)-1) to 0
        sbox=array.get(shortBoxes,i)  
        lstart=array.get(shortBoxStart, i)  
        lstate=array.get(shortBoxState, i)
        top=box.get_top(sbox)
        left=box.get_left(sbox)
        bottom=box.get_bottom(sbox)
        if(high>bottom and low < bottom and bar_index>lstart and lstate==0 and useMitigatedBlocks)
            sbox.set_bgcolor(mitigatedOBColour)
            shortRetestCandle:=true
            array.set(shortBoxState, i, 1)
        if(bullishBreakerSource>top)
            // remove the short box 
            box.delete(sbox)
            array.remove(shortBoxState, i)
            array.remove(shortBoxes, i)
            array.remove(shortBoxStart, i)
            bullishAlert:=true
            // ok to draw?
            if((bar_index - lastDownIndex) < 1000 and bar_index>lastLongIndex) 
                // add bullish order block
                array.push(longBoxStart, bar_index+1)
                array.push(longBoxState, 0)
                array.push(longBoxes, box.new(left=lastDownIndex, top=lastDown, bottom=lastLow,right=lastDownIndex, bgcolor=bullishOBColour,border_color=color.rgb(207,203,202, 100), extend=extend.right))
                // add bullish bos line
                if(showBullishBOS)
                    array.push(bosLines, line.new(left, top, bar_index, top, color= color.green, style=line.style_solid, width = 1))
                // show bos candle
                BosCandle:=true
                // colour mode bullish
                CandleColourMode:=1
                // record last bull bar index to prevent duplication
                lastLongIndex:=bar_index
                lastBullBreakLow:=low

// alerts
alertcondition(bullishAlert and showAlerts, "Bullish break of structure", 'bullish break of structure was triggered')
alertcondition(bearishAlert and showAlerts, "Bearish break of structure", 'bearish break of structure was triggered')
alertcondition(shortRetestCandle and showAlerts, "Bearish order block re-tested", 'bearish order block has been re-tested')
alertcondition(longRetestCandle and showAlerts, "Bullish order block re-tested", 'bullish order block has been re-tested')

// update bullish order blocks
if((array.size(longBoxes) > 0))
    for i = (array.size(longBoxes)-1) to 0
        lbox=array.get(longBoxes,i)
        lstart=array.get(longBoxStart, i)
        lstate=array.get(longBoxState, i)
        bottom=box.get_bottom(lbox)
        top=box.get_top(lbox)
        boxLeft=box.get_left(lbox)
        if(low<=top and high>top and bar_index>lstart and lstate==0)
            if(useMitigatedBlocks)
                lbox.set_bgcolor(mitigatedOBColour)
            longRetestCandle:=true
            array.set(longBoxState, i, 1)
        if(close<bottom)
            array.remove(longBoxStart, i)
            array.remove(longBoxState, i)
            array.remove(longBoxes, i)
            box.delete(lbox)


// candle colouring
CandleColour= CandleColourMode==1?bullishTrendColor:bearishTrendColour
CandleColour:= BosCandle and showBreakerCandles?BOSCandleColour:CandleColour
CandleColour:=shortRetestCandle and showRetestCandles?shortRetestCandleColour:CandleColour
CandleColour:=longRetestCandle and showRetestCandles?longRetestCandleColour:CandleColour
barcolor(showTrendColours?CandleColour:na)
barcolor(showBreakerCandles and BosCandle?CandleColour:na)

// record last up and down candles
if(close<open)
    lastDown:=high
    lastDownIndex:=bar_index
    lastLow:=low

if(close>open)
    lastUp:=close
    lastUpIndex:=bar_index
    lastUpOpen:=open
    lastUpLow:=low
    lastHigh:=high
    
// update last high/low for more accurate order block placements
lastHigh:=high>lastHigh?high:lastHigh
lastLow:=low<lastLow?low:lastLow

// "Ichimoku Cloud"
conversionPeriods = input.int(9, minval=1, title="Conversion Line Length")
basePeriods = input.int(26, minval=1, title="Base Line Length")
laggingSpan2Periods = input.int(52, minval=1, title="Leading Span B Length")
displacement = input.int(26, minval=1, title="Lagging Span")
donchian(len) => math.avg(ta.lowest(len), ta.highest(len))
conversionLine = donchian(conversionPeriods)
baseLine = donchian(basePeriods)
leadLine1 = math.avg(conversionLine, baseLine)
leadLine2 = donchian(laggingSpan2Periods)
plot(conversionLine, color=#2962FF, title="Conversion Line")
plot(baseLine, color=#B71C1C, title="Base Line")
plot(close, offset = -displacement + 1, color=#43A047, title="Lagging Span")
ichimoku_p1 = plot(leadLine1, offset = displacement - 1, color=#A5D6A7,
	 title="Leading Span A")
ichimoku_p2 = plot(leadLine2, offset = displacement - 1, color=#EF9A9A,
	 title="Leading Span B")
plot(leadLine1 > leadLine2 ? leadLine1 : leadLine2, offset = displacement - 1, title = "Kumo Cloud Upper Line", display = display.none) 
plot(leadLine1 < leadLine2 ? leadLine1 : leadLine2, offset = displacement - 1, title = "Kumo Cloud Lower Line", display = display.none) 
fill(ichimoku_p1, ichimoku_p2, color = leadLine1 > leadLine2 ? color.rgb(67, 160, 71, 90) : color.rgb(244, 67, 54, 90))
//@version=5
indicator("CROSV [Scientist-kasutu]", overlay=true, max_lines_count = 500, max_labels_count = 500, max_bars_back=500)

// EMA Inputs
ema1_length = input.int(20, title="EMA 1 (20) Length", minval=1)
ema2_length = input.int(50, title="EMA 2 (50) Length", minval=1)
ema3_length = input.int(200, title="EMA 3 (200) Length", minval=1)
zone_width = input.int(15, title="Zone Width", minval=1)

// Toggle for EMA 1 (20)
show_ema1 = input.bool(true, title="Show EMA 1 (20)")

// Custom Color Inputs
up_color1 = input.color(color.blue, title="EMA 1 Up Color")
down_color1 = input.color(color.red, title="EMA 1 Down Color")
up_color2_zone = input.color(color.green, title="50 EMA Zone Up Color")
down_color2_zone = input.color(color.orange, title="50 EMA Zone Down Color")
up_color2 = input.color(color.blue, title="EMA 2 Up Color")
down_color2 = input.color(color.red, title="EMA 2 Down Color")
up_color3 = input.color(color.blue, title="EMA 3 Up Color")
down_color3 = input.color(color.red, title="EMA 3 Down Color")

// Calculating EMAs
ema1 = ta.ema(close, ema1_length)
ema2 = ta.ema(close, ema2_length)
ema3 = ta.ema(close, ema3_length)

// Color conditions for EMA 20, EMA 50, and EMA 50 zone
ema1_color = (ema1 > ema2) ? up_color1 : down_color1  // EMA 1 (20) line color changes after crossing EMA 50
ema2_color = (ema2 > ema3) ? up_color2 : down_color2  // EMA 2 (50) line color changes after crossing EMA 200
zone_color = (ema2 > ema1) ? up_color2_zone : down_color2_zone  // EMA 50 zone changes based on EMA 20

// Plot EMAs with conditional coloring and transparency for toggle
plot(ema1, color=show_ema1 ? ema1_color : na, linewidth=1, title="EMA 1 (20)")  // EMA 1 changes color based on EMA 50
plot(ema2, color=ema2_color, linewidth=2, title="EMA 2 (50)")  // EMA 2 changes color based on EMA 200
plot(ema3, color=(ema3 > ema2) ? down_color3 : up_color3, linewidth=3, title="EMA 3 (200)")  // Corrected color condition for EMA 3

// Plot Outline for EMA 2 Using Zone Color
plot(ema2, color=color.new(zone_color, 80), linewidth=zone_width, title="EMA 2 Outline")  // Outline using zone color


// This work is licensed under a Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0) https://creativecommons.org/licenses/by-nc-sa/4.0/
// © LuxAlgo
// Nadarya-Wattson
//------------------------------------------------------------------------------
//Settings
//-----------------------------------------------------------------------------{
h = input.float(8.,'Bandwidth', minval = 0)
mult = input.float(3., minval = 0)
src = input(close, 'Source')

repaint = input(true, 'Repainting Smoothing', tooltip = 'Repainting is an effect where the indicators historical output is subject to change over time. Disabling repainting will cause the indicator to output the endpoints of the calculations')

//Style
upCss = input.color(color.teal, 'Colors', inline = 'inline1', group = 'Style')
dnCss = input.color(color.red, '', inline = 'inline1', group = 'Style')

//-----------------------------------------------------------------------------}
//Functions
//-----------------------------------------------------------------------------{
//Gaussian window
gauss(x, h) => math.exp(-(math.pow(x, 2)/(h * h * 2)))

//-----------------------------------------------------------------------------}
//Append lines
//-----------------------------------------------------------------------------{
n = bar_index

var ln = array.new_line(0) 

if barstate.isfirst and repaint
    for i = 0 to 499
        array.push(ln,line.new(na,na,na,na))

//-----------------------------------------------------------------------------}
//End point method
//-----------------------------------------------------------------------------{
var coefs = array.new_float(0)
var den = 0.

if barstate.isfirst and not repaint
    for i = 0 to 499
        w = gauss(i, h)
        coefs.push(w)

    den := coefs.sum()

out = 0.
if not repaint
    for i = 0 to 499
        out += src[i] * coefs.get(i)
out /= den
mae = ta.sma(math.abs(src - out), 499) * mult

upper = out + mae
lower = out - mae
 
//-----------------------------------------------------------------------------}
//Compute and display NWE
//-----------------------------------------------------------------------------{
float y2 = na
float y1 = na

nwe = array.new<float>(0)
if barstate.islast and repaint
    sae = 0.
    //Compute and set NWE point 
    for i = 0 to math.min(499,n - 1)
        sum = 0.
        sumw = 0.
        //Compute weighted mean 
        for j = 0 to math.min(499,n - 1)
            w = gauss(i - j, h)
            sum += src[j] * w
            sumw += w

        y2 := sum / sumw
        sae += math.abs(src[i] - y2)
        nwe.push(y2)
    
    sae := sae / math.min(499,n - 1) * mult
    for i = 0 to math.min(499,n - 1)
        if i%2
            line.new(n-i+1, y1 + sae, n-i, nwe.get(i) + sae, color = upCss)
            line.new(n-i+1, y1 - sae, n-i, nwe.get(i) - sae, color = dnCss)
        
        if src[i] > nwe.get(i) + sae and src[i+1] < nwe.get(i) + sae
            label.new(n-i, src[i], '▼', color = color(na), style = label.style_label_down, textcolor = dnCss, textalign = text.align_center)
        if src[i] < nwe.get(i) - sae and src[i+1] > nwe.get(i) - sae
            label.new(n-i, src[i], '▲', color = color(na), style = label.style_label_up, textcolor = upCss, textalign = text.align_center)
        
        y1 := nwe.get(i)

//-----------------------------------------------------------------------------}
//Dashboard
//-----------------------------------------------------------------------------{
var tb = table.new(position.top_right, 1, 1
  , bgcolor = #1e222d
  , border_color = #373a46
  , border_width = 1
  , frame_color = #373a46
  , frame_width = 1)

if repaint
    tb.cell(0, 0, 'Repainting Mode Enabled', text_color = color.white, text_size = size.small)

//-----------------------------------------------------------------------------}
//Plot
//-----------------------------------------------------------------------------}
plot(repaint ? na : out + mae, 'Upper', upCss)
plot(repaint ? na : out - mae, 'Lower', dnCss)

//Crossing Arrows
plotshape(ta.crossunder(close, out - mae) ? low : na, "Crossunder", shape.labelup, location.absolute, color(na), 0 , text = '▲', textcolor = upCss, size = size.tiny)
plotshape(ta.crossover(close, out + mae) ? high : na, "Crossover", shape.labeldown, location.absolute, color(na), 0 , text = '▼', textcolor = dnCss, size = size.tiny)

//-----------------------------------------------------------------------------}

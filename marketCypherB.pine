//@version=5

//  Thanks to dynausmaux for the code..
//  Thanks to falconCoin for https://www.tradingview.com/script/KVfgBvDd-Market-Cipher-B-Free-version-with-Buy-and-sell/ inspired me to start this.
//  Thanks to LazyBear for WaveTrend Oscillator https://www.tradingview.com/script/2KE8wTuF-Indicator-WaveTrend-Oscillator-WT/
//  Thanks to RicardoSantos for https://www.tradingview.com/script/3oeDh0Yq-RS-Price-Divergence-Detector-V2/
//  Thanks to LucemAnb for Plain Stochastic Divergence https://www.tradingview.com/script/FCUgF8ag-Plain-Stochastic-Divergence/
//  Thanks to andreholanda73 for MFI+RSI Area https://www.tradingview.com/script/UlGZzUAr/
//  I especially thanks to TradingView for its platform that facilitates development and learning.
//
//  CIRCLES & TRIANGLES:
//    - LITTLE CIRCLE: They appear at all WaveTrend wave crossings.
//    - GREEN CIRCLE: The wavetrend waves are at the oversold level and have crossed up (bullish).
//    - RED CIRCLE: The wavetrend waves are at the overbought level and have crossed down (bearish).
//    - GOLD/ORANGE CIRCLE: When RSI is below 20, WaveTrend waves are below or equal to -80 and have crossed up after good bullish divergence (DONT BUY WHEN GOLD CIRCLE APPEAR).
//    - None of these circles are certain signs to trade. It is only information that can help you. 
//    - PURPLE TRIANGLE: Appear when a bullish or bearish divergence is formed and WaveTrend waves crosses at overbought and oversold points.
//
//  NOTES:
//    - I am not an expert trader or know how to program pine script as such, in fact it is my first indicator only to study and all the code is copied and modified from other codes that are published in TradingView.
//    - I am very grateful to the entire TV community that publishes codes so that other newbies like me can learn and present their results. This is an attempt to imitate Market Cipher B. 
//    - Settings by default are for 4h timeframe, divergences are more stronger and accurate. Haven't tested in all timeframes, only 2h and 4h.
//    - If you get an interesting result in other timeframes I would be very grateful if you would comment your configuration to implement it or at least check it.
//
//  CONTRIBUTIONS:
//    - Tip/Idea: Add higher timeframe analysis for bearish/bullish patterns at the current timeframe.
//    + Bearish/Bullish FLAG:
//      - MFI+RSI Area are RED (Below 0).
//      - Wavetrend waves are above 0 and crosses down.
//      - VWAP Area are below 0 on higher timeframe.
//      - This pattern reversed becomes bullish.
//    - Tip/Idea: Check the last heikinashi candle from 2 higher timeframe
//    + Bearish/Bullish DIAMOND:
//      - HT Candle is red
//      - WT > 0 and crossed down

indicator(title='Market Cipher B', shorttitle='Market Cipher B')

// PARAMETERS {
i_showStoch = input.bool(bool(true), title='Classic OB & OS and Pseudo RSIS', group='Classic OB & OS and Pseudo RSIS', tooltip='Use Classic Overbought and Oversold with Stoch Rsi and Rsi')
// WaveTrend
wtShow = input.bool(true, title='Show WaveTrend', group='WaveTrend Settings')
wtBuyShow = input.bool(true, title='Show Buy dots', group='WaveTrend Settings')
wtGoldShow = input.bool(true, title='Show Gold dots', group='WaveTrend Settings')
wtSellShow = input.bool(true, title='Show Sell dots', group='WaveTrend Settings')
wtDivShow = input.bool(true, title='Show Div. dots', group='WaveTrend Settings')
vwapShow = input.bool(true, title='Show Fast WT', group='WaveTrend Settings')
wtChannelLen = input.int(9, title='WT Channel Length', group='WaveTrend Settings')
wtAverageLen = input.int(12, title='WT Average Length', group='WaveTrend Settings')
wtMASource = input.source(hlc3, title='WT MA Source', group='WaveTrend Settings')
wtMALen = input.int(3, title='WT MA Length', group='WaveTrend Settings')

// WaveTrend Overbought & Oversold lines
obLevel = input.int(53, title='WT Overbought Level 1', group='WaveTrend Settings')
obLevel2 = input.int(60, title='WT Overbought Level 2', group='WaveTrend Settings')
obLevel3 = input.int(100, title='WT Overbought Level 3', group='WaveTrend Settings')
osLevel = input.int(-53, title='WT Oversold Level 1', group='WaveTrend Settings')
osLevel2 = input.int(-60, title='WT Oversold Level 2', group='WaveTrend Settings')
osLevel3 = input.int(-75, title='WT Oversold Level 3', group='WaveTrend Settings')

// Divergence WT
wtShowDiv = input.bool(true, title='Show WT Regular Divergences', group='WaveTrend Settings')
wtShowHiddenDiv = input.bool(false, title='Show WT Hidden Divergences', group='WaveTrend Settings')
showHiddenDiv_nl = input.bool(true, title='Not apply OB/OS Limits on Hidden Divergences', group='WaveTrend Settings')
wtDivOBLevel = input.int(45, title='WT Bearish Divergence min', group='WaveTrend Settings')
wtDivOSLevel = input.int(-65, title='WT Bullish Divergence min', group='WaveTrend Settings')

// Divergence extra range
wtDivOBLevel_addshow = input.bool(true, title='Show 2nd WT Regular Divergences', group='WaveTrend Settings')
wtDivOBLevel_add = input.int(15, title='WT 2nd Bearish Divergence', group='WaveTrend Settings')
wtDivOSLevel_add = input.int(-40, title='WT 2nd Bullish Divergence 15 min', group='WaveTrend Settings')
//
//
//
//
//
//
//

// RSI Stochastic
stochShow = input.bool(true, title='Show Stochastic RSI', group='Stoch Settings')
stochUseLog = input.bool(true, title=' Use Log?', group='Stoch Settings')
stochAvg = input.bool(false, title='Use Average of both K & D', group='Stoch Settings')
stochSRC = input.source(close, title='Stochastic RSI Source', group='Stoch Settings')
stochLen = input.int(14, title='Stochastic RSI Length', group='Stoch Settings')
stochRsiLen = input.int(14, title='RSI Length ', group='Stoch Settings')
stochKSmooth = input.int(3, title='Stochastic RSI K Smooth', group='Stoch Settings')
stochDSmooth = input.int(3, title='Stochastic RSI D Smooth', group='Stoch Settings')

// Divergence stoch
stochShowDiv = input.bool(false, title='Show Stoch Regular Divergences', group='Stoch Settings')
stochShowHiddenDiv = input.bool(false, title='Show Stoch Hidden Divergences', group='Stoch Settings')

// Schaff Trend Cycle
tcLine = input.bool(false, title='Show Schaff TC line', group='Schaff Settings')
tcSRC = input.source(close, title='Schaff TC Source', group='Schaff Settings')
tclength = input.int(10, title='Schaff TC', group='Schaff Settings')
tcfastLength = input.int(23, title='Schaff TC Fast Lenght', group='Schaff Settings')
tcslowLength = input.int(50, title='Schaff TC Slow Length', group='Schaff Settings')
tcfactor = input.float(0.5, title='Schaff TC Factor', group='Schaff Settings')

// Sommi Flag
sommiFlagShow = input.bool(false, title='Show Sommi flag', group='Sommi Settings')
sommiShowVwap = input.bool(false, title='Show Sommi F. Wave', group='Sommi Settings')
sommiVwapTF = input.string('720', title='Sommi F. Wave timeframe', group='Sommi Settings')
sommiVwapBearLevel = input.int(0, title='F. Wave Bear Level (less than)', group='Sommi Settings')
sommiVwapBullLevel = input.int(0, title='F. Wave Bull Level (more than)', group='Sommi Settings')
soomiFlagWTBearLevel = input.int(0, title='WT Bear Level (more than)', group='Sommi Settings')
soomiFlagWTBullLevel = input.int(0, title='WT Bull Level (less than)', group='Sommi Settings')
soomiRSIMFIBearLevel = input.int(0, title='Money flow Bear Level (less than)', group='Sommi Settings')
soomiRSIMFIBullLevel = input.int(0, title='Money flow Bull Level (more than)', group='Sommi Settings')

// Sommi Diamond
sommiDiamondShow = input.bool(false, title='Show Sommi diamond', group='Sommi Settings')
sommiHTCRes = input.string('60', title='HTF Candle Res. 1', group='Sommi Settings')
sommiHTCRes2 = input.string('240', title='HTF Candle Res. 2', group='Sommi Settings')
soomiDiamondWTBearLevel = input.int(0, title='WT Bear Level (More than)', group='Sommi Settings')
soomiDiamondWTBullLevel = input.int(0, title='WT Bull Level (Less than)', group='Sommi Settings')

// macd Colors
macdWTColorsShow = input.bool(false, title='Show MACD Colors', group='MACD Settings')
macdWTColorsTF = input.string('240', title='MACD Colors MACD TF', group='MACD Settings')

darkMode = input.bool(false, title='Dark mode', group='Mode Settings')


// Colors
colorRed = #ff0000
colorPurple = #e600e6
colorGreen = #3fff00
colorOrange = #e2a400
colorYellow = #ffe500
colorWhite = #ffffff
colorPink = #ff00f0
colorBluelight = #31c0ff
colorWT2 = #0d47a1
colorWT2_ = #131722
colormacdWT1a = #4caf58
colormacdWT1b = #af4c4c
colormacdWT1c = #7ee57e
colormacdWT1d = #ff3535
colormacdWT2a = #305630
colormacdWT2b = #310101
colormacdWT2c = #132213
colormacdWT2d = #770000

// } PARAMETERS

// FUNCTIONS {

// Divergences 
f_top_fractal(src) =>
    src[4] < src[2] and src[3] < src[2] and src[2] > src[1] and src[2] > src[0]
f_bot_fractal(src) =>
    src[4] > src[2] and src[3] > src[2] and src[2] < src[1] and src[2] < src[0]
f_fractalize(src) =>
    f_top_fractal(src) ? 1 : f_bot_fractal(src) ? -1 : 0

f_findDivs(src, topLimit, botLimit, useLimits) =>
    fractalTop = f_fractalize(src) > 0 and (useLimits ? src[2] >= topLimit : true) ? src[2] : na
    fractalBot = f_fractalize(src) < 0 and (useLimits ? src[2] <= botLimit : true) ? src[2] : na
    highPrev = ta.valuewhen(fractalTop, src[2], 0)[2]
    highPrice = ta.valuewhen(fractalTop, high[2], 0)[2]
    lowPrev = ta.valuewhen(fractalBot, src[2], 0)[2]
    lowPrice = ta.valuewhen(fractalBot, low[2], 0)[2]
    bearSignal = fractalTop and high[2] > highPrice and src[2] < highPrev
    bullSignal = fractalBot and low[2] < lowPrice and src[2] > lowPrev
    bearDivHidden = fractalTop and high[2] < highPrice and src[2] > highPrev
    bullDivHidden = fractalBot and low[2] > lowPrice and src[2] < lowPrev
    [fractalTop, fractalBot, lowPrev, bearSignal, bullSignal, bearDivHidden, bullDivHidden]



// WaveTrend
f_wavetrend(src, chlen, avg, malen, tf) =>
    tfsrc = request.security(ticker.heikinashi(syminfo.tickerid), tf, src)
    esa = ta.ema(tfsrc, chlen)
    de = ta.ema(math.abs(tfsrc - esa), chlen)
    ci = (tfsrc - esa) / (0.015 * de)
    wt1 = request.security(ticker.heikinashi(syminfo.tickerid), tf, ta.ema(ci, avg))
    wt2 = request.security(ticker.heikinashi(syminfo.tickerid), tf, ta.sma(wt1, malen))
    wtVwap = wt1 - wt2
    wtOversold = wt2 <= osLevel
    wtOverbought = wt2 >= obLevel
    wtCross = ta.cross(wt1, wt2)
    wtCrossUp = wt2 - wt1 <= 0
    wtCrossDown = wt2 - wt1 >= 0
    wtCrosslast = ta.cross(wt1[2], wt2[2])
    wtCrossUplast = wt2[2] - wt1[2] <= 0
    wtCrossDownlast = wt2[2] - wt1[2] >= 0
    [wt1, wt2, wtOversold, wtOverbought, wtCross, wtCrossUp, wtCrossDown, wtCrosslast, wtCrossUplast, wtCrossDownlast, wtVwap]
    //
// Schaff Trend Cycle
f_tc(src, length, fastLength, slowLength) =>
    ema1 = ta.ema(src, fastLength)
    ema2 = ta.ema(src, slowLength)
    macdVal = ema1 - ema2
    alpha = ta.lowest(macdVal, length)
    beta = ta.highest(macdVal, length) - alpha
    gamma = (macdVal - alpha) / beta * 100
    gamma := beta > 0 ? gamma : nz(gamma[1])
    delta = gamma
    delta := na(delta[1]) ? delta : delta[1] + tcfactor * (gamma - delta[1])
    epsilon = ta.lowest(delta, length)
    zeta = ta.highest(delta, length) - epsilon
    eta = (delta - epsilon) / zeta * 100
    eta := zeta > 0 ? eta : nz(eta[1])
    stcReturn = eta
    stcReturn := na(stcReturn[1]) ? stcReturn : stcReturn[1] + tcfactor * (eta - stcReturn[1])
    stcReturn

// Stochastic RSI
f_stochrsi(_src, _stochlen, _rsilen, _smoothk, _smoothd, _log, _avg) =>
    src = _log ? math.log(_src) : _src
    rsi = ta.rsi(src, _rsilen)
    kk = ta.sma(ta.stoch(rsi, rsi, rsi, _stochlen), _smoothk)
    d1 = ta.sma(kk, _smoothd)
    avg_1 = math.avg(kk, d1)
    k = _avg ? avg_1 : kk
    [k, d1]



// Get higher timeframe candle
f_getTFCandle(_tf) =>
    _open = request.security(ticker.standard(syminfo.tickerid), _tf, open, barmerge.gaps_off, barmerge.lookahead_on)
    _close = request.security(ticker.standard(syminfo.tickerid), _tf, close, barmerge.gaps_off, barmerge.lookahead_on)
    _high = request.security(ticker.standard(syminfo.tickerid), _tf, high, barmerge.gaps_off, barmerge.lookahead_on)
    _low = request.security(ticker.standard(syminfo.tickerid), _tf, low, barmerge.gaps_off, barmerge.lookahead_on)
    hl2 = (_high + _low) / 2.0
    newBar = ta.change(_open)
    candleBodyDir = _close > _open
    [candleBodyDir, newBar]

// Sommi flag
f_findSommiFlag(tf, wt1, wt2, rsimfi, wtCross, wtCrossUp, wtCrossDown) =>
    [hwt1, hwt2, hwtOversold, hwtOverbought, hwtCross, hwtCrossUp, hwtCrossDown, hwtCrosslast, hwtCrossUplast, hwtCrossDownlast, hwtVwap] = f_wavetrend(wtMASource, wtChannelLen, wtAverageLen, wtMALen, tf)

    bearPattern = rsimfi < soomiRSIMFIBearLevel and wt2 > soomiFlagWTBearLevel and wtCross and wtCrossDown and hwtVwap < sommiVwapBearLevel

    bullPattern = rsimfi > soomiRSIMFIBullLevel and wt2 < soomiFlagWTBullLevel and wtCross and wtCrossUp and hwtVwap > sommiVwapBullLevel

    [bearPattern, bullPattern, hwtVwap]

f_findSommiDiamond(tf, tf2, wt1, wt2, wtCross, wtCrossUp, wtCrossDown) =>
    [candleBodyDir, newBar] = f_getTFCandle(tf)
    [candleBodyDir2, newBar2] = f_getTFCandle(tf2)
    bearPattern = wt2 >= soomiDiamondWTBearLevel and wtCross and wtCrossDown and not candleBodyDir and not candleBodyDir2
    bullPattern = wt2 <= soomiDiamondWTBullLevel and wtCross and wtCrossUp and candleBodyDir and candleBodyDir2
    [bearPattern, bullPattern]

// } FUNCTIONS  

// CALCULATE INDICATORS {
// Calculates WaveTrend
[wt1, wt2, wtOversold, wtOverbought, wtCross, wtCrossUp, wtCrossDown, wtCross_last, wtCrossUp_last, wtCrossDown_last, wtVwap] = f_wavetrend(wtMASource, wtChannelLen, wtAverageLen, wtMALen, timeframe.period)


// WT Divergences
[wtFractalTop, wtFractalBot, wtLow_prev, wtBearDiv, wtBullDiv, wtBearDivHidden, wtBullDivHidden] = f_findDivs(wt2, wtDivOBLevel, wtDivOSLevel, true)

[wtFractalTop_add, wtFractalBot_add, wtLow_prev_add, wtBearDiv_add, wtBullDiv_add, wtBearDivHidden_add, wtBullDivHidden_add] = f_findDivs(wt2, wtDivOBLevel_add, wtDivOSLevel_add, true)
[wtFractalTop_nl, wtFractalBot_nl, wtLow_prev_nl, wtBearDiv_nl, wtBullDiv_nl, wtBearDivHidden_nl, wtBullDivHidden_nl] = f_findDivs(wt2, 0, 0, false)

wtBearDivHidden_ = showHiddenDiv_nl ? wtBearDivHidden_nl : wtBearDivHidden
wtBullDivHidden_ = showHiddenDiv_nl ? wtBullDivHidden_nl : wtBullDivHidden

WTBearDivColorDown = input.color(color.new(#e60000, 0), 'WT Bear Div', group='Color Settings')
wtBullDivColorUp = input.color(color.new(#00e676, 0), 'WT Bull Div', group='Color Settings')

wtBearDivColor = wtShowDiv and wtBearDiv or wtShowHiddenDiv and wtBearDivHidden_ ? WTBearDivColorDown : na
wtBullDivColor = wtShowDiv and wtBullDiv or wtShowHiddenDiv and wtBullDivHidden_ ? wtBullDivColorUp : na

wtBearDivColor_add = wtShowDiv and wtDivOBLevel_addshow and wtBearDiv_add or wtShowHiddenDiv and wtDivOBLevel_addshow and wtBearDivHidden_add ? WTBearDivColorDown : na
wtBullDivColor_add = wtShowDiv and wtDivOBLevel_addshow and wtBullDiv_add or wtShowHiddenDiv and wtDivOBLevel_addshow and wtBullDivHidden_add ? wtBullDivColorUp : na
// 
//
// Small Circles WT Cross
signalcolorup = input.color(color.new(#00e676, 0), 'Buy dot', group='Color Settings')
signalcolordown = input.color(color.new(#ff5252, 0), 'Sell dot', group='Color Settings')

signalColor = wt2 - wt1 > 0 ? signalcolordown : signalcolorup

// Buy signal.
buySignal = wtCross and wtCrossUp and wtOversold

buySignalDiv = wtShowDiv and wtBullDiv or wtShowDiv and wtBullDiv_add


buySignalDiv_color = wtBullDiv ? colorGreen : wtBullDiv_add ? color.new(colorGreen, 60) : na

// Sell signal
sellSignal = wtCross and wtCrossDown and wtOverbought

sellSignalDiv = wtShowDiv and wtBearDiv or wtShowDiv and wtBearDiv_add

sellSignalDiv_color = wtBearDiv ? colorRed : wtBearDiv_add ? color.new(colorRed, 60) : na

//          
// } CALCULATE INDICATORS


// DRAW {
bgcolor(darkMode ? color.new(#000000, 0) : na, transp=90)
zLine = plot(0, color=color.new(colorWhite, 50))

//

// WT Areas
colorWT1blue = input(color.new(#9dc6f0,0), title = 'Wave 1', group = 'Color Settings')
colorWT2purple = input.color(color.new(#0863e9,10), 'Wave 2', group='Color Settings')
plot(wtShow ? wt1 : na, style=plot.style_area, title='Wave 1', color=colorWT1blue)

// plot(wtShow ? wt2 : na, style=plot.style_area, title='WT Wave 2', color=darkMode ? color.new(colorWT2_,25) : color.new(colorWT2purple,25))
plot(wtShow ? wt2 : na, style=plot.style_area, title='Wave 2', color=colorWT2purple)

// VWAP
VWAPColor = input(color.new(#eeff00af,50), title = "Vwap", group = "Color Settings")
plot(vwapShow ? wtVwap : na, title='VWAP', color=VWAPColor, style=plot.style_area, linewidth=2)

// 


// WT Div

plot(series=wtFractalTop ? wt2[2] : na, title='WT Bearish Divergence', color=wtBearDivColor, linewidth=2, offset=-2)
plot(series=wtFractalBot ? wt2[2] : na, title='WT Bullish Divergence', color=wtBullDivColor, linewidth=2, offset=-2)

// WT 2nd Div
plot(series=wtFractalTop_add ? wt2[2] : na, title='WT 2nd Bearish Divergence', color=wtBearDivColor_add, linewidth=2, offset=-2)
plot(series=wtFractalBot_add ? wt2[2] : na, title='WT 2nd Bullish Divergence', color=wtBullDivColor_add, linewidth=2, offset=-2)


// Draw Overbought & Oversold lines
oblvl2color = color.new(#ffffff, 0)  //input(color.new(#ffffff, 0), "OB LVL 2", group = 'Color Settings')
oblvl3color = color.new(#ffffff, 0)  //input(color.new(#ffffff, 0), "OB LVL 3", group = 'Color Settings')
oslvl2color = color.new(#ffffff, 0)  //input(color.new(#ffffff, 0), "OS LVL 2", group = 'Color Settings')

//plot(obLevel, title = 'Over Bought Level 1', color = colorWhite, linewidth = 1, style = plot.style_circles, transp = 85)
plot(obLevel2, title='Over Bought Level 2', color=oblvl2color, linewidth=1, style=plot.style_stepline, transp=85)
plot(obLevel3, title='Over Bought Level 3', color=oblvl3color, linewidth=1, style=plot.style_circles, transp=95)

//plot(osLevel, title = 'Over Sold Level 1', color = colorWhite, linewidth = 1, style = plot.style_circles, transp = 85)
plot(osLevel2, title='Over Sold Level 2', color=oslvl2color, linewidth=1, style=plot.style_stepline, transp=85)


// ALERTS {

//MoneyFlow
// Function to calculate OC for Heikin-Ashi
heikenashi = ticker.heikinashi(syminfo.tickerid)
OC(tf) =>
    request.security(heikenashi, tf, close - open)

// Function to calculate HL for Heikin-Ashi
HL(tf) =>
    request.security(heikenashi, tf, high - low)

// Get values from Heikin-Ashi
m = request.security(heikenashi, timeframe.period, ta.sma(hlc3, 5))
f = request.security(heikenashi, timeframe.period, ta.sma(math.abs(hlc3 - m), 5))
i = request.security(heikenashi, timeframe.period, (hlc3 - m) / (0.015 * f))
mf = request.security(heikenashi, timeframe.period, ta.sma(i, 60))

// Plotting the Money Flow
MFI2 = input(true, title = 'Money flow')
MFIoutline2 = input(false, title = 'Money flow Outline')
Money_Flow = plot(MFI2 ? mf : na, title='Money Flow', color=mf > 0 ? input(#00ff08cc, 'MoneyFlow Bullish') : input(#ff0000cc, 'MoneyFlow Bearish'), style=plot.style_area, linewidth=1)
MFIoutline = plot(MFIoutline2 ? mf : na, title='Money Flow Outline', color=mf > 0 ? input(color.new(color.green, 0), 'MoneyFlow Outline Bullish') : input(color.new(color.red, 0), 'MoneyFlow Outline Bearish'), style=plot.style_area, linewidth=2)

//stochastics
stochShow2 = input(true, title='Relative Strength Index')
stochShow3 = input(true, title='Stoch RSI')
DoubleRSI_K_Fast = request.security(ticker.heikinashi(syminfo.tickerid), timeframe.period, ta.sma(ta.stoch(close, high, low, 40), 2))
DoubleRSI_K_Slow = request.security(ticker.heikinashi(syminfo.tickerid), timeframe.period, ta.sma(ta.stoch(close, high, low, 81), 2))
DoubleRSICrossOver = DoubleRSI_K_Slow < DoubleRSI_K_Fast ? 1 : 0
//Plotting
RSI = plot(stochShow2 ? DoubleRSI_K_Fast : na, title='Relative Strength Index', color=input(#5b0077), linewidth=2)
ColorStoch1 = input(#00ff0880, title = 'Stoch bullish')
ColorStoch2 = input(#ff1100, title = 'Stoch Bearish')
Color2 = DoubleRSI_K_Slow < DoubleRSI_K_Fast ? ColorStoch1 : ColorStoch2
stochDplot = plot(stochShow3 ? DoubleRSI_K_Slow : na, title='Stochastics Rsi', color=Color2, linewidth=2)
// Circles
plot(wtCross ? wt2 : na, title='Buy and sell circle', color=signalColor, style=plot.style_circles, linewidth=2, transp=15)

plotchar(wtBuyShow and buySignal ? -107 : na, title='Big Buy circle', char='•', color=input(title = "Big Buy Circle", defval = color.new(colorGreen, 50)), location=location.absolute, size=size.small)
plotchar(wtSellShow and sellSignal ? 105 : na, title='Big Sell circle', char='•', color=input(title = "Big Sell Circle",defval =  color.new(colorRed, 50)), location=location.absolute, size=size.small)